package com.codewithngoc.instagallery.routes

import com.codewithngoc.instagallery.domain.models.AuthPrincipal
import com.codewithngoc.instagallery.domain.models.CreatePostRequest
import com.codewithngoc.instagallery.domain.models.UpdatePostRequest
import com.codewithngoc.instagallery.domain.services.PostService
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun Application.postRoutes(postService: PostService) {
    routing {
        // C√°c route c·∫ßn x√°c th·ª±c (JWT)
        authenticate("auth-jwt") {

            // ‚úÖ TH√äM ROUTE CHO ADMIN ·ªû ƒê√ÇY
            route("api/admin") {

                // ‚úÖ Th√™m route xo√° to√†n b·ªô
                delete("delAllPost") {
                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null) {
                        call.respond(HttpStatusCode.Unauthorized, mapOf("message" to "Kh√¥ng ƒë∆∞·ª£c ·ªßy quy·ªÅn"))
                        return@delete
                    }

                    postService.deleteAllPosts(principal).fold(
                        onSuccess = {
                            call.respond(HttpStatusCode.OK, mapOf("message" to "üßπ ƒê√£ xo√° to√†n b·ªô b√†i ƒëƒÉng th√†nh c√¥ng"))
                        },
                        onFailure = { e ->
                            when (e.message) {
                                "Unauthorized" -> call.respond(HttpStatusCode.Forbidden, mapOf("message" to "Ch·ªâ admin m·ªõi ƒë∆∞·ª£c xo√° to√†n b·ªô b√†i vi·∫øt"))
                                else -> call.respond(HttpStatusCode.InternalServerError, mapOf("message" to "L·ªói khi xo√° t·∫•t c·∫£ b√†i vi·∫øt: ${e.message}"))
                            }
                        }
                    )
                }
            }

            route("api/posts") {
                // L·∫•y t·∫•t c·∫£ b√†i ƒëƒÉng t·ª´ database (Ch·ªâ admin)
                get {
                    // L·∫•y th√¥ng tin principal n·∫øu c·∫ßn
                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null) {
                        call.respond(HttpStatusCode.Unauthorized, mapOf("message" to "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p"))
                        return@get
                    }

                    postService.getAllPosts().fold(
                        onSuccess = { posts ->
                            call.respond(HttpStatusCode.OK, posts)
                        },
                        onFailure = { e ->
                            call.respond(
                                HttpStatusCode.InternalServerError,
                                mapOf("message" to "L·ªói khi l·∫•y t·∫•t c·∫£ b√†i ƒëƒÉng: ${e.message}")
                            )
                        }
                    )
                }

                // T·∫°o b√†i ƒëƒÉng
                post {
                    val principal = call.principal<AuthPrincipal>() ?: return@post call.respond(
                        HttpStatusCode.Unauthorized, error("Kh√¥ng ƒë∆∞·ª£c ·ªßy quy·ªÅn")
                    )

                    val request = runCatching { call.receive<CreatePostRequest>() }
                        .onFailure { e ->
                            e.printStackTrace()
                            return@post call.respond(
                                HttpStatusCode.BadRequest,
                                error("D·ªØ li·ªáu request kh√¥ng h·ª£p l·ªá: ${e.localizedMessage}")
                            )
                        }.getOrNull() ?: return@post

                    postService.createPost(principal.userId, request).fold(
                        onSuccess = { post -> call.respond(HttpStatusCode.Created, post) },
                        onFailure = { e ->
                            e.printStackTrace()
                            call.respond(
                                HttpStatusCode.InternalServerError,
                                error("L·ªói khi t·∫°o b√†i ƒëƒÉng: ${e.localizedMessage ?: "Kh√¥ng x√°c ƒë·ªãnh"}")
                            )
                        }
                    )
                }


                // C·∫≠p nh·∫≠t b√†i vi·∫øt
                put("{postId}") {
                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null) {
                        call.respond(HttpStatusCode.Unauthorized, mapOf("message" to "Kh√¥ng ƒë∆∞·ª£c ·ªßy quy·ªÅn"))
                        return@put
                    }

                    val postId = call.parameters["postId"]?.toIntOrNull()
                    if (postId == null) {
                        call.respond(HttpStatusCode.BadRequest, mapOf("message" to "ID b√†i ƒëƒÉng kh√¥ng h·ª£p l·ªá"))
                        return@put
                    }

                    val request = try {
                        call.receive<UpdatePostRequest>()
                    } catch (e: Exception) {
                        call.respond(HttpStatusCode.BadRequest, mapOf("message" to "D·ªØ li·ªáu request kh√¥ng h·ª£p l·ªá: ${e.message}"))
                        return@put
                    }

                    postService.updatePost(postId, principal, request).fold(
                        onSuccess = { postResponse -> call.respond(HttpStatusCode.OK, postResponse) },
                        onFailure = { e ->
                            when (e.message) {
                                "Post not found" -> call.respond(HttpStatusCode.NotFound, mapOf("message" to "B√†i ƒëƒÉng kh√¥ng t√¨m th·∫•y"))
                                "Unauthorized" -> call.respond(HttpStatusCode.Forbidden, mapOf("message" to "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√†i ƒëƒÉng n√†y"))
                                else -> call.respond(HttpStatusCode.InternalServerError, mapOf("message" to "L·ªói khi c·∫≠p nh·∫≠t b√†i ƒëƒÉng: ${e.message}"))
                            }
                        }
                    )
                }

                // Xo√° b√†i vi·∫øt
                delete("{postId}") {
                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null) {
                        call.respond(HttpStatusCode.Unauthorized, mapOf("message" to "Kh√¥ng ƒë∆∞·ª£c ·ªßy quy·ªÅn"))
                        return@delete
                    }

                    val postId = call.parameters["postId"]?.toIntOrNull()
                    if (postId == null) {
                        call.respond(HttpStatusCode.BadRequest, mapOf("message" to "ID b√†i ƒëƒÉng kh√¥ng h·ª£p l·ªá"))
                        return@delete
                    }

                    postService.deletePost(postId, principal).fold(
                        onSuccess = { success ->
                            if (success) {
                                call.respond(HttpStatusCode.OK, mapOf("message" to "‚úÖ ƒê√£ xo√° b√†i ƒëƒÉng th√†nh c√¥ng"))
                            } else {
                                call.respond(HttpStatusCode.NotFound, mapOf("message" to "B√†i ƒëƒÉng kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ x√≥a"))
                            }
                        },
                        onFailure = { e ->
                            when (e.message) {
                                "Post not found" -> call.respond(HttpStatusCode.NotFound, mapOf("message" to "B√†i ƒëƒÉng kh√¥ng t√¨m th·∫•y"))
                                "Unauthorized" -> call.respond(HttpStatusCode.Forbidden, mapOf("message" to "Kh√¥ng c√≥ quy·ªÅn x√≥a b√†i ƒëƒÉng n√†y"))
                                else -> call.respond(HttpStatusCode.InternalServerError, mapOf("message" to "L·ªói khi x√≥a b√†i ƒëƒÉng: ${e.message}"))
                            }
                        }
                    )
                }

                // L·∫•y danh s√°ch feed
                get("/feed") {
                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null) {
                        call.respond(HttpStatusCode.Unauthorized, mapOf("message" to "Kh√¥ng ƒë∆∞·ª£c ·ªßy quy·ªÅn"))
                        return@get
                    }

                    val page = call.request.queryParameters["page"]?.toIntOrNull() ?: 0
                    val size = call.request.queryParameters["size"]?.toIntOrNull() ?: 10

                    postService.getFeedPosts(principal.userId, page, size).fold(
                        onSuccess = { posts -> call.respond(HttpStatusCode.OK, posts) },
                        onFailure = { e -> call.respond(HttpStatusCode.InternalServerError, mapOf("message" to "L·ªói khi l·∫•y b√†i ƒëƒÉng feed: ${e.message}")) }
                    )
                }
            }
        }


        // C√°c route kh√¥ng c·∫ßn x√°c th·ª±c
        route("api/posts") {

            // L·∫•y b√†i vi·∫øt theo ID
            get("{postId}") {
                val postId = call.parameters["postId"]?.toIntOrNull()
                if (postId == null) {
                    call.respond(HttpStatusCode.BadRequest, mapOf("message" to "ID b√†i ƒëƒÉng kh√¥ng h·ª£p l·ªá"))
                    return@get
                }

                val principal = call.principal<AuthPrincipal>() // Optional

                postService.getPostById(postId, principal).fold(
                    onSuccess = { postResponse -> call.respond(HttpStatusCode.OK, postResponse) },
                    onFailure = { e ->
                        when (e.message) {
                            "Post not found" -> call.respond(HttpStatusCode.NotFound, mapOf("message" to "B√†i ƒëƒÉng kh√¥ng t√¨m th·∫•y"))
                            "Access denied" -> call.respond(HttpStatusCode.Forbidden, mapOf("message" to "B·∫°n kh√¥ng c√≥ quy·ªÅn xem b√†i ƒëƒÉng n√†y"))
                            else -> call.respond(HttpStatusCode.InternalServerError, mapOf("message" to "L·ªói khi l·∫•y b√†i ƒëƒÉng: ${e.message}"))
                        }
                    }
                )
            }

            // L·∫•y danh s√°ch b√†i vi·∫øt kh√°m ph√°
            get("/explore") {
                val page = call.request.queryParameters["page"]?.toIntOrNull() ?: 0
                val size = call.request.queryParameters["size"]?.toIntOrNull() ?: 10

                postService.getExplorePosts(page, size).fold(
                    onSuccess = { posts -> call.respond(HttpStatusCode.OK, posts) },
                    onFailure = { e -> call.respond(HttpStatusCode.InternalServerError, mapOf("message" to "L·ªói khi l·∫•y b√†i ƒëƒÉng kh√°m ph√°: ${e.message}")) }
                )
            }
        }
    }
}
