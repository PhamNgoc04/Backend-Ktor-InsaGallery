package com.codewithngoc.instagallery.routes

import com.codewithngoc.instagallery.domain.models.AuthPrincipal // ƒê·∫£m b·∫£o AuthPrincipal c·ªßa b·∫°n ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ƒë√∫ng
import com.codewithngoc.instagallery.domain.models.LoginRequest
import com.codewithngoc.instagallery.domain.models.RegisterRequest
import com.codewithngoc.instagallery.domain.models.UpdateProfileRequest
import com.codewithngoc.instagallery.domain.services.AuthService
import io.ktor.http.HttpStatusCode
import io.ktor.server.application.Application
import io.ktor.server.auth.authenticate
import io.ktor.server.auth.principal
import io.ktor.server.request.receive
import io.ktor.server.routing.post
import io.ktor.server.routing.route
import io.ktor.server.routing.routing
import io.ktor.server.response.respond
import io.ktor.server.routing.delete
import io.ktor.server.routing.get
import io.ktor.server.routing.put


fun Application.authRoutes(authService: AuthService) {
    routing {
        route("/api/auth") {
            /**
             * üìå ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
             */
            post("/register") {
                val request = call.receive<RegisterRequest>()

                val result = authService.registerUser(request)
                result.fold(
                    onSuccess = { authResponse ->
                        call.respond(HttpStatusCode.Created, authResponse)
                    },
                    onFailure = { error ->
                        // Tr√°nh ti·∫øt l·ªô qu√° nhi·ªÅu chi ti·∫øt l·ªói n·ªôi b·ªô
                        call.respond(HttpStatusCode.Conflict, mapOf("error" to (error.message ?: "Registration failed")))
                    }
                )
            }

            /**
             * üìå ƒêƒÉng nh·∫≠p
             */
            post("/login") {
                val request = call.receive<LoginRequest>()

                val result = authService.loginUser(request)
                result.fold(
                    onSuccess = { loginResponse ->
                        call.respond(HttpStatusCode.OK, loginResponse)
                    },
                    onFailure = { error ->
                        // Tr√°nh ti·∫øt l·ªô qu√° nhi·ªÅu chi ti·∫øt l·ªói n·ªôi b·ªô
                        call.respond(HttpStatusCode.Unauthorized, mapOf("error" to (error.message ?: "Invalid credentials")))
                    }
                )
            }

            // ‚úÖ M·ªöI: Endpoint ƒëƒÉng xu·∫•t
            /**
             * üìå ƒêƒÉng xu·∫•t
             * Y√™u c·∫ßu refresh token trong body ƒë·ªÉ v√¥ hi·ªáu h√≥a session.
             */
            post("/logout") {
                val refreshToken = try {
                    call.receive<Map<String, String>>()["refreshToken"]
                } catch (e: Exception) {
                    call.respond(HttpStatusCode.BadRequest, mapOf("error" to "‚ùå Missing refreshToken in request body"))
                    return@post
                }

                if (refreshToken == null) {
                    call.respond(HttpStatusCode.BadRequest, mapOf("error" to "‚ùå refreshToken is required"))
                    return@post
                }

                val result = authService.logout(refreshToken)
                result.fold(
                    onSuccess = { success ->
                        if (success) {
                            call.respond(HttpStatusCode.OK, mapOf("message" to "‚úÖ Logged out successfully"))
                        } else {
                            call.respond(HttpStatusCode.NotFound, mapOf("error" to "Refresh token not found or already invalidated"))
                        }
                    },
                    onFailure = { error ->
                        call.respond(HttpStatusCode.InternalServerError, mapOf("error" to (error.message ?: "Failed to logout")))
                    }
                )
            }

            // --- C√°c route ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng JWT ---
            authenticate("auth-jwt") {

                /**
                 * üìå L·∫•y th√¥ng tin user theo ID
                 * User ch·ªâ c√≥ th·ªÉ l·∫•y th√¥ng tin c·ªßa ch√≠nh m√¨nh.
                 * Admin c√≥ th·ªÉ l·∫•y th√¥ng tin c·ªßa b·∫•t k·ª≥ user n√†o.
                 */
                get("/profile/{id}") {
                    val requestedId = call.parameters["id"]?.toIntOrNull()
                    if (requestedId == null) {
                        call.respond(HttpStatusCode.BadRequest, mapOf("error" to "‚ùå Invalid user ID format"))
                        return@get
                    }

                    // L·∫•y principal ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
                    val principal = call.principal<AuthPrincipal>()

                    // Ki·ªÉm tra n·∫øu principal kh√¥ng t·ªìn t·∫°i (l·ªói x√°c th·ª±c JWT)
                    if (principal == null) {
                        call.respond(HttpStatusCode.Unauthorized, mapOf("error" to "‚õî Authentication required"))
                        return@get
                    }

                    // Logic ·ªßy quy·ªÅn:
                    // 1. N·∫øu l√† ADMIN, ƒë∆∞·ª£c ph√©p truy c·∫≠p b·∫•t k·ª≥ ID n√†o.
                    // 2. N·∫øu kh√¥ng ph·∫£i ADMIN, ch·ªâ ƒë∆∞·ª£c ph√©p truy c·∫≠p ID c·ªßa ch√≠nh m√¨nh.
                    val isAuthorized = principal.role == "ADMIN" || principal.userId == requestedId

                    if (!isAuthorized) {
                        call.respond(HttpStatusCode.Forbidden, mapOf("error" to "‚õî Permission denied"))
                        return@get
                    }

                    val result = authService.getUserById(requestedId)
                    result.fold(
                        onSuccess = { call.respond(HttpStatusCode.OK, it) },
                        onFailure = {
                            // Cung c·∫•p th√¥ng b√°o l·ªói chung h∆°n n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
                            call.respond(HttpStatusCode.NotFound, mapOf("error" to "User not found"))
                        }
                    )
                }


                /**
                 * üìå C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
                 * User ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh.
                 * Admin c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ªßa b·∫•t k·ª≥ user n√†o.
                 */
                put("/profile/{id}") {
                    val requestedId = call.parameters["id"]?.toIntOrNull()
                    if (requestedId == null) {
                        call.respond(HttpStatusCode.BadRequest, mapOf("error" to "‚ùå Invalid user ID format"))
                        return@put
                    }

                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null) {
                        call.respond(HttpStatusCode.Unauthorized, mapOf("error" to "‚õî Authentication required"))
                        return@put
                    }

                    // Logic ·ªßy quy·ªÅn:
                    // 1. N·∫øu l√† ADMIN, ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t b·∫•t k·ª≥ ID n√†o.
                    // 2. N·∫øu kh√¥ng ph·∫£i ADMIN, ch·ªâ ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t ID c·ªßa ch√≠nh m√¨nh.
                    val isAuthorized = principal.role == "ADMIN" || principal.userId == requestedId

                    if (!isAuthorized) {
                        call.respond(HttpStatusCode.Forbidden, mapOf("error" to "‚õî Permission denied"))
                        return@put
                    }

                    val updateRequest = try {
                        call.receive<UpdateProfileRequest>()
                    } catch (e: Exception) {
                        // Tr√°nh ti·∫øt l·ªô chi ti·∫øt l·ªói n·ªôi b·ªô v·ªÅ c·∫•u tr√∫c request
                        call.respond(HttpStatusCode.BadRequest, mapOf("error" to "‚ùå Invalid request body format or missing fields"))
                        return@put
                    }

                    val result = authService.updateUserProfile(requestedId, updateRequest)
                    result.fold(
                        onSuccess = { call.respond(HttpStatusCode.OK, it) },
                        onFailure = { error ->
                            // Cung c·∫•p th√¥ng b√°o l·ªói chung h∆°n
                            call.respond(HttpStatusCode.NotFound, mapOf("error" to "Failed to update user profile"))
                        }
                    )
                }

                /**
                 * üóëÔ∏è X√≥a ng∆∞·ªùi d√πng theo ID
                 * Ch·ªâ ADMIN m·ªõi c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng.
                 * (N·∫øu mu·ªën cho ph√©p t·ª± x√≥a, c·∫ßn th√™m logic ki·ªÉm tra principal.userId == requestedId)
                 */
                delete("/profile/{id}") {
                    val requestedId = call.parameters["id"]?.toIntOrNull()
                    if (requestedId == null) {
                        call.respond(
                            HttpStatusCode.BadRequest,
                            mapOf("error" to "‚ùå Invalid user ID format")
                        )
                        return@delete
                    }

                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null) {
                        call.respond(HttpStatusCode.Unauthorized, mapOf("error" to "‚õî Authentication required"))
                        return@delete
                    }

                    // Ch·ªâ ADMIN m·ªõi ƒë∆∞·ª£c ph√©p x√≥a ng∆∞·ªùi d√πng kh√°c
                    // N·∫øu mu·ªën cho ph√©p ng∆∞·ªùi d√πng t·ª± x√≥a t√†i kho·∫£n c·ªßa m√¨nh:
                    // val isAuthorized = principal.role == "ADMIN" || principal.userId == requestedId
                    val isAuthorized = principal.role == "ADMIN"

                    if (!isAuthorized) {
                        call.respond(
                            HttpStatusCode.Forbidden,
                            mapOf("error" to "‚õî Only admin can delete users or you can only delete your own account")
                        )
                        return@delete
                    }

                    val result = authService.deleteUserById(requestedId)
                    result.fold(
                        onSuccess = {
                            call.respond(
                                HttpStatusCode.OK,
                                mapOf("message" to "üóëÔ∏è User deleted successfully")
                            )
                        },
                        onFailure = { error ->
                            val msg = error.message ?: "‚ùå Failed to delete user"
                            val status = if (msg.contains("not found", ignoreCase = true)) HttpStatusCode.NotFound
                            else HttpStatusCode.InternalServerError
                            // Cung c·∫•p th√¥ng b√°o l·ªói chung h∆°n
                            call.respond(status, mapOf("error" to "‚ö†Ô∏è Failed to delete user: $msg"))
                        }
                    )
                }
            }
        }

        // --- Th√™m route m·ªõi ƒë·ªÉ xem h·ªì s∆° c√¥ng khai theo username ---
        route("/api/users") {
            /**
             * üìå Xem h·ªì s∆° ng∆∞·ªùi d√πng kh√°c (GET /api/users/{username})
             * L·∫•y th√¥ng tin c√¥ng khai c·ªßa m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥ d·ª±a v√†o username.
             * Kh√¥ng y√™u c·∫ßu x√°c th·ª±c.
             */
            get("/{username}") {
                val username = call.parameters["username"]
                if (username == null) {
                    call.respond(HttpStatusCode.BadRequest, mapOf("error" to "‚ùå Username is required"))
                    return@get
                }

                val result = authService.getPublicProfileByUsername(username)
                result.fold(
                    onSuccess = { userProfile ->
                        call.respond(HttpStatusCode.OK, userProfile)
                    },
                    onFailure = {
                        call.respond(HttpStatusCode.NotFound, mapOf("error" to "User not found"))
                    }
                )
            }
        }
    }
}
