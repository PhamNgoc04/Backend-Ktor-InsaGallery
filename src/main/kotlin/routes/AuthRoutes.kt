package com.codewithngoc.instagallery.routes

import com.codewithngoc.instagallery.domain.models.AuthPrincipal
import com.codewithngoc.instagallery.domain.models.LoginRequest
import com.codewithngoc.instagallery.domain.models.RegisterRequest
import com.codewithngoc.instagallery.domain.models.UpdateProfileRequest
import com.codewithngoc.instagallery.domain.services.AuthService
import io.ktor.http.HttpStatusCode
import io.ktor.server.application.Application
import io.ktor.server.auth.UserIdPrincipal
import io.ktor.server.auth.authenticate
import io.ktor.server.auth.jwt.JWTPrincipal
import io.ktor.server.auth.principal
import io.ktor.server.request.receive
import io.ktor.server.routing.post
import io.ktor.server.routing.route
import io.ktor.server.routing.routing
import io.ktor.server.response.respond
import io.ktor.server.routing.delete
import io.ktor.server.routing.get
import io.ktor.server.routing.put


fun Application.authRoutes(authService: AuthService) {
    routing {
        route("/api/auth") {
            /**
             * üìå ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
             */
            post("/register") {
                val request = call.receive<RegisterRequest>()

                val result = authService.registerUser(request)
                result.fold(
                    onSuccess = { authResponse ->
                        call.respond(HttpStatusCode.Created, authResponse)
                    },
                    onFailure = { error ->
                        call.respond(HttpStatusCode.Conflict, error.message ?: "Register failed")
                    }
                )
            }

            /**
             * üìå ƒêƒÉng nh·∫≠p
             */
            post("/login") {
                val request = call.receive<LoginRequest>()

                val result = authService.loginUser(request)
                result.fold(
                    onSuccess = { loginResponse ->
                        call.respond(HttpStatusCode.OK, loginResponse)
                    },
                    onFailure = { error ->
                        call.respond(HttpStatusCode.Unauthorized, error.message ?: "Login failed")
                    }
                )
            }
            authenticate("auth-jwt") {

                /**
                 * üìå L·∫•y th√¥ng tin user theo ID (c√≥ th·ªÉ d√πng auth header ki·ªÉm tra)
                 * User v√† Admin ƒë·ªÅu ƒë∆∞·ª£c truy c·∫≠p, nh∆∞ng User ch·ªâ c√≥ th·ªÉ l·∫•y th√¥ng tin c·ªßa ch√≠nh m√¨nh.
                 * Admin c√≥ th·ªÉ l·∫•y th√¥ng tin c·ªßa b·∫•t k·ª≥ user n√†o.
                 */
                get("/profile/{id}") {
                    val id = call.parameters["id"]?.toIntOrNull()
                    if (id == null) {
                        call.respond(HttpStatusCode.BadRequest, "Invalid user ID format")
                        return@get
                    }

                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null || (principal.role != "ADMIN" && principal.userId != id)) {
                        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
                        call.respond(HttpStatusCode.Forbidden, mapOf("error" to "‚õî Permission denied"))
                        return@get
                    }

                    val result = authService.getUserById(id)
                    result.fold(
                        onSuccess = { call.respond(HttpStatusCode.OK, it) },
                        onFailure = { call.respond(HttpStatusCode.NotFound, it.message ?: "User not found") }
                    )
                }


                /**
                 * üìå C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
                 * User v√† Admin ƒë·ªÅu ƒë∆∞·ª£c truy c·∫≠p, nh∆∞ng User ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh.
                 * Admin c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ªßa b·∫•t k·ª≥ user n√†o.
                 */
                put("/profile/{id}") {
                    val id = call.parameters["id"]?.toIntOrNull()
                    if (id == null) {
                        call.respond(HttpStatusCode.BadRequest, mapOf("error" to "‚ùå Invalid user ID format"))
                        return@put
                    }

                    val principal = call.principal<AuthPrincipal>()
                    if (principal == null || (principal.role != "ADMIN" && principal.userId != id)) {
                        call.respond(HttpStatusCode.Forbidden, mapOf("error" to "‚õî Permission denied"))
                        return@put
                    }

                    val updateRequest = try {
                        call.receive<UpdateProfileRequest>()
                    } catch (e: Exception) {
                        call.respond(HttpStatusCode.BadRequest, mapOf("error" to "‚ùå Invalid request body"))
                        return@put
                    }

                    val result = authService.updateUserProfile(id, updateRequest)
                    result.fold(
                        onSuccess = { call.respond(HttpStatusCode.OK, it) },
                        onFailure = { call.respond(HttpStatusCode.NotFound, it.message ?: "Update failed") }
                    )
                }

                /**
                 * üóëÔ∏è X√≥a ng∆∞·ªùi d√πng theo ID
                 */
                delete("/profile/{id}") {
                    val id = call.parameters["id"]?.toIntOrNull()
                    if (id == null) {
                        call.respond(
                            HttpStatusCode.BadRequest,
                            mapOf("error" to "‚ùå Invalid user ID format")
                        )
                        return@delete
                    }

                    val principal = call.principal<AuthPrincipal>()
                    if (principal?.role != "ADMIN") {
                        call.respond(
                            HttpStatusCode.Forbidden,
                            mapOf("error" to "‚õî Only admin can delete users")
                        )
                        return@delete
                    }

                    val result = authService.deleteUserById(id)
                    result.fold(
                        onSuccess = {
                            call.respond(
                                HttpStatusCode.OK,
                                mapOf("message" to "üóëÔ∏è User deleted successfully")
                            )
                        },
                        onFailure = { error ->
                            val msg = error.message ?: "‚ùå Failed to delete user"
                            val status = if (msg.contains(
                                    "not found",
                                    ignoreCase = true
                                )
                            ) HttpStatusCode.NotFound
                            else HttpStatusCode.InternalServerError

                            call.respond(status, mapOf("error" to "‚ö†Ô∏è $msg"))
                        }
                    )
                }
            }
        }
    }
}